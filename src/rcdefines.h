#ifndef RCDEFINES_H_INCLUDED
#define RCDEFINES_H_INCLUDED

namespace RC
{
	const int CUBIE_COUNT = 5;
	const float CUBE_EDGE = 1.0;

	enum RotAxis
	{
		RA_X = 0, RA_Y, RA_Z,
		RA_COUNT, RA_NONE,
		RA_FIRST = RA_X
	};

	enum CubeFace
	{
		CF_FRONT = 0, CF_UP, CF_BACK, CF_DOWN, CF_LEFT, CF_RIGHT,
		CF_COUNT, CF_NONE,
	};

	enum GameKey
	{
		GK_ROTATEUP, GK_ROTATEDOWN, GK_ROTATELEFT, GK_ROTATERIGHT, GK_ROTATECW, GK_ROTATEACW,

		GK_MOVEFRONT, GK_MOVEFRONTINV, GK_MOVEBACK, GK_MOVEBACKINV,
		GK_MOVELEFT, GK_MOVELEFTINV, GK_MOVERIGHT, GK_MOVERIGHTINV,
		GK_MOVEUP, GK_MOVEUPINV, GK_MOVEDOWN, GK_MOVEDOWNINV,

		GK_MOUSEMOVE,
		GK_MOUSEROTATE,

		GK_CHANGECOLOR,
		GK_CHANGEPROJ,

		GK_CUBERESET,
		GK_CUBEMIX,
		GK_CUBEUNDO,

		GK_COUNT,
		GK_NONE,
		GK_FIRST = GK_ROTATEUP,
		GK_LOOKFIRST = GK_ROTATEUP,
		GK_LOOKLAST = GK_ROTATEACW,
		GK_MOVEFIRST = GK_MOVEFRONT,
		GK_MOVELAST = GK_MOVEDOWNINV
	};

	enum RotateType
	{
        RT_UP = GK_ROTATEUP,
        RT_DOWN = GK_ROTATEDOWN,
        RT_LEFT = GK_ROTATELEFT,
        RT_RIGHT = GK_ROTATERIGHT,
        RT_CW = GK_ROTATECW,
        RT_ACW = GK_ROTATEACW,
        RT_COUNT = GK_LOOKLAST - GK_LOOKFIRST + 1,
        RT_NONE
	};

	enum MoveType
	{
		MT_FRONT = GK_MOVEFRONT,
		MT_FRONTINV = GK_MOVEFRONTINV,
		MT_BACK = GK_MOVEBACK,
		MT_BACKINV = GK_MOVEBACKINV,
		MT_LEFT = GK_MOVELEFT,
		MT_LEFTINV = GK_MOVELEFTINV,
		MT_RIGHT = GK_MOVERIGHT,
		MT_RIGHTINV = GK_MOVERIGHTINV,
		MT_UP = GK_MOVEUP,
		MT_UPINV = GK_MOVEUPINV,
		MT_DOWN = GK_MOVEDOWN,
		MT_DOWNINV = GK_MOVEDOWNINV,

		MT_NONE = GK_NONE,
		MT_COUNT = GK_MOVELAST - GK_MOVEFIRST + 1,
		MT_FIRST = MT_FRONT,
		MT_LAST = MT_DOWNINV
	};
}

#endif // RCDEFINES_H_INCLUDED
